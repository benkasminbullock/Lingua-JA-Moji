class: romanization
%%explain.en:
These functions convert Japanese letters to and from romanized forms.
%%
explain.ja: かな ⇄ ローマ字

%%desc.en:
This detects whether a string of alphabetical characters, which may
also include characters with macrons or circumflexes, "looks like"
romanized Japanese. If the test is successful, it returns a true
value, and if the test is unsuccessful, it returns a false value. If
the string is empty, it returns a false value. Hyphens are not allowed
as the first character.

This works by converting the string to kana via L</romaji2kana> and
seeing if it converts cleanly or not.

The "true" value returned is the output of the round-trip conversion,
converted into wapuro format.
%%
%%desc.ja:
アルファベットの列はローマ字に見えるなら真、見えないなら偽を戻します。「-」で初まる文字列の場合は戻し値が偽(undef)となります。

真の戻し値はローマ字のワープロ変換。

これはローマ字を変換してみて、成功する場合「ローマ字だ」という原理で働きますので、色々な文字列を受けます。もっと厳密に確認したい時はL</is_romaji_strict>をお勧めします。
%%
%%eg:
# The following line returns "undef"
is_romaji ("abcdefg");
# The following line returns a defined value
is_romaji ('loyehye');
# The following line returns a defined value
is_romaji ("atarimae");
%%
name: is_romaji

%%desc.en:
Halfway between L</is_romaji> and L</is_romaji_strict>, this allows
some formations like "pinku no dorufin" but not the really unlikely
stuff which "is_romaji" allows.
%%
%%desc.ja:
L</is_romaji_strict>とL</is_romaji>の間にローマ字ですが厳密に日本語ではない言葉もあります。例えば、"pinku no dorufin"は「ピンク ノ ドルフィン」というカタカナになりますが純粋日本語ではありません。is_romaji_semistrictはこういう言葉をみとめても、is_romajiのように出鱈目の文字を許さないというものです。
%%
%%eg:
# The following line returns "undef"
is_romaji_semistrict ("abcdefg");
# The following line returns "undef"
is_romaji_semistrict ('loyehye');
# The following line returns a defined value
is_romaji_semistrict ("atarimae");
# The following line returns a defined value
is_romaji_semistrict ("pinku no dorufin");
%%
name: is_romaji_semistrict

%%desc.en:
This detects whether a string of alphabetical characters, which may
also include characters with macrons or circumflexes, "looks like"
romanized Japanese. If the test is successful, it returns a true
value, and if the test is unsuccessful, it returns a false value. If
the string is empty, it returns a false value.

This test is much stricter than L</is_romaji>. It insists that the
word does not contain constructions which may be valid as inputs to an
IME, but which do not look like Japanese words.

The "true" value returned is the output of the round-trip conversion,
converted into wapuro format.
%%
%%desc.ja:
アルファベットの列はローマ字に見えるなら真、見えないなら偽。L</is_romaji>より厳しく、コンピューター入力に見えるかどうかではなく、「日本語になる」かどうか確認します。

真の値はローマ字のワープロ変換です。
%%
%%eg:
# The following line returns "undef"
is_romaji_strict ("abcdefg");
# The following line returns "undef"
is_romaji_strict ('loyehye');
# The following line returns a defined value
is_romaji_strict ("atarimae");
%%
name: is_romaji_strict
since: 0.27

%%desc.en:
Given a kana or romaji input, C<is_voiced> returns a true value if the
sound is a voiced sound like I<a>, I<za>, I<ga>, etc. and the
undefined value if not.
%%
desc.ja: 仮名かローマ字は濁音（゛）、半濁音（゜）がついていれば、真、ついていなければ偽（undef)。
%%eg:
if (is_voiced ('が')) {
     print "が is voiced.\n";
}
%%
name: is_voiced

%%desc.en:
Convert kana to a romanized form.

An optional second argument, a hash reference, controls the style of
conversion.

    use utf8;
    $romaji = kana2romaji ("しんぶん", {style => "hepburn"});
    # $romaji = "shimbun"

The options are

=over

=item style

The style of romanization. The default style of romanization is
"Nippon-shiki". The user can set the conversion style to "hepburn" or
"passport" or "kunrei" or "common". If Hepburn is selected, then the
following option C<use_m> is set to "true", and the C<ve_type> is set
to "macron". The "common" style is the same as the Hepburn style, but
it does things like changing "ジェット" to "jetto" rather than
ignoring the small vowel.

Possible styles are as follows:

=over

=item none/empty

Without a style, the L<Nippon-shiki
romanization|https://www.sljfaq.org/afaq/nippon-shiki.html> is
used. This is the only romanisation style which allows round trips from kana to romanised and back.

=item common

This is a modification of the Hepburn system which also changes
combinations of large kana + small vowel kana into the commonest
romanized form. For example "ジェット" becomes "jetto" and "ウェ"
becomes "we".

=item hepburn

This gives L<Hepburn
romanization|https://www.sljfaq.org/afaq/hepburn.html>. This is
strictly defined to be the actual Hepburn system, so you may prefer to
use L</common> if your kana contains things like ファ which you want
to turn into "fa".

=item kunrei

This gives L<Kunrei-shiki romanisation|https://www.sljfaq.org/afaq/kunrei-shiki.html>, the form
of romanisation used in childrens' education. This is similar to Nippon-shiki except for a few consonant-vowel combinations.

=item passport

This gives "passport romaji" where long "o" vowels get turned into
"oh" and other long vowels are deleted. In this system "おおの" turns
into "ohno" and "ゆうすけ" turns into "yusuke".

=back

=item use_m

If this is true, L</syllabic n>s (ん) which come before "b" or "p"
sounds, such as the first "n" in "shinbun" (しんぶん, newspaper) will
be converted into "m" rather than "n". 

It is automatically set to a true value if you choose L</hepburn> or
L</passport> styles of romanisation, but you can override that by
setting it to a false, but not undefined, value, something like this:

    my $romaji = kana2romaji ($hiragana,
			  {style => 'hepburn', 
			   ve_type => 'wapuro',
			   use_m => 0,});

I apologise for the convoluted interface. See L</HISTORY> for more on
the haphazard design of the module.

=item ve_type

The C<ve_type> option controls how long vowels are written. The
default is to use circumflexes to represent long vowels. If C<style>
is set to C<hepburn> or C<common>, the default is set to use
macrons. If C<style> is set to C<passport>, the value of C<ve_type> is
also set to C<passport>. The choices are:

=over

=item undef

A circumflex is used.

=item macron

A macron is used.

=item passport

"Oh" is used to write long "o" vowels, and other long vowels are
ignored.

=item none

Long vowels are not indicated.

=item wapuro

The L</chouon> marks become hyphens, and おう becomes ou.

=back

=item wo

     kana2romaji ("ちりぬるを", { wo => 1 });

If "wo" is set to a true value, "を" becomes "wo", otherwise it
becomes "o".

=back
%%
%%desc.ja:
仮名をローマ字に変換。

オプションは関数の２番目の引数でハシュリファレンスとして入ります。

    use utf8;
    $romaji = kana2romaji ("しんぶん", {style => "hepburn"});
    # $romaji = "shimbun"

可能なオプションは

=over

=item style

ローマ字の種類。

=over

=item undef

ディフォルトは日本式（「つづり」が「tuduri」, 「少女」が「syôzyo」）。

=item passport

パスポート式（「いとう」が「itoh」になります。）

=item kunrei

訓令式（小学校４年生が習うローマ字法）

=item hepburn

ヘボン式（「つづり」が「tsuzuri」, 「少女」が「shōjo」）。
これを選べば、下記のuse_mが真になり、ve_typeがmacronになります。hepburnは厳しい意味でやりますので、L</common>のほうが役に立つかもしれません。

=item common

「ジェット」が「jetto」になります。「ウェ」が「we」になります。つまり普通のローマ字です。

=item wapuro

ワープロローマ字。長音符を使いません。「少女」が「shoujo」など、ASCIIのみの記号で表記するローマ字です。

=back

=item use_m

真なら「しんぶん」が「shimbun」、「ぐんま」が「gumma」
偽なら「しんぶん」が「shinbun」、「ぐんま」が「gunma」

L</hepburn>を選ぶとき、use_mが真になってしまいますが、都合が悪いときにはuse_mをundef意外の偽の値にに設定してください：

    my $romaji = kana2romaji ($hiragana,
			  {style => 'hepburn', 
			   ve_type => 'wapuro',
			   use_m => 0,});

面倒くさいデフォルトお詫びします。

=item ve_type

長い母音はどの様に表現するか選ぶために使います。

=over

=item undef

曲折アクセント(ô)を使います。

=item macron

マクロン(ō)を使います。

=item passport

「アー」、「イー」、「ウー」、「エー」が「a」, 「i」, 「u」, 「e」になり、「オー」が「oh」になります。

=item none

「アー」、「イー」、「ウー」、「エー」が「a」, 「i」, 「u」, 「e」, 「o」になります。

=item wapuro

ワープロローマ字のように表示する。「アー」、「イー」、「ウー」、「エー」が「a-」, 「i-」, 「u-」, 「e-」,「o-」になります。「おう」が「ou」など、仮名の長音を仮名で代表するよう、ローマ字入力のようなことです。

=back

=item wo

     kana2romaji ("ちりぬるを", { wo => 1 });

"wo"が真なら、「を」が"wo"になります。そうでもない場合は"o"になります。

=back
%%
eg: $romaji = kana2romaji ("うれしいこども");
expect: uresîkodomo
name: kana2romaji
out: $romaji

%%desc.en:
Given a kana input, return the "dictionary order" consonant of the
first kana. If the first kana is any of あいうえお, it returns an
empty string. If the kana is an unvoiced kana, it returns the
corresponding consonant of the first kana in the Nippon-shiki
romanisation. If the kana is a voiced kana, it returns the
corresponding consonant of the unvoiced version of the first kana in
the Nippon-shiki romanisation.

This enables Japanese words to be sorted into the order used in
Japanese dictionaries, where the voiced/unvoiced distinction between,
for example, za and sa, or ta and da, is ignored.
%%
eg: $consonant = kana_consonant ('ざる');
expect: s
name: kana_consonant
out: $consonant

%%desc.en:
C<normalize_romaji> converts romanized Japanese to a canonical form,
which is based on the Nippon-shiki romanization, but without
representing long vowels using a circumflex. In the canonical form,
sokuon (っ) characters are converted into the string "xtu". If there
is kana in the input string, this will also be converted to romaji.

C<normalize_romaji> is for comparing two Japanese words which may be
represented in different ways, for example in different romanization
systems, to see if they refer to the same word despite the difference
in writing. It does not provide a standardized or
officially-sanctioned form of romanization.
%%
%%desc.ja:
C<normalize_romaji>はかなやローマ字で書いた言葉を比べるため、かなやローマ字の言葉を決まったローマ字の書き方になおします。この「決まった」ローマ字は本モジュール限定のもので、あくまでも違ったかなや違ったローマ字法で書いた言葉を比べるためだけのものに過ぎませんので、正式なローマ字法と間違わないようによろしくおねがいします。
%%
eg: $normalized = normalize_romaji ('tsumuji');
name: normalize_romaji

%%desc.en:
Convert romanized Japanese into hiragana. This takes the same options
as L</romaji2kana>. It also switches on the "wapuro" option, which
uses long vowels with a kana rather than a L</chouon>.
%%
%%desc.ja:
ローマ字をひらがなに変関します。オプションはL</romaji2kana>と同じ。L</wapuro>オプションもオンにして、「ou」が「おー」ではなく、「おう」になります。
%%
eg: $hiragana = romaji2hiragana ('babubo');
expect: ばぶぼ
name: romaji2hiragana
out: $hiragana

%%desc.en:
Convert romanized Japanese to katakana. The romanization is highly
liberal and will attempt to convert any romanization it sees into
katakana. The rules of romanization are based on the behaviour of the
Microsoft IME (input method editor). To convert romanized Japanese
into hiragana, use L</romaji2hiragana>.

An optional second argument to the function contains options in the
form of a hash reference,

     $kana = romaji2kana ($romaji, {wapuro => 1});

Use an option C<< wapuro => 1 >> to convert long vowels into the
equivalent kana rather than L</chouon>.

     $kana = romaji2kana ($romaji, {ime => 1});

Use the C<< ime => 1 >> option to approximate the behaviour of an
IME. For example, input "gumma" becomes グッマ and input "onnna"
becomes オンナ. Passport romaji ("Ohshimizu") is disallowed if this
option is switched on.

See also L</is_romaji>, L</is_romaji_strict>, and
L</is_romaji_semistrict> for validation of romanised Japanese inputs.
%%
%%desc.ja:
ローマ字をカタカナに変換します。ローマ字はできるだけ幅広く受け入れます。
ローマ字をひらがなに変換したいときはL</romaji2hiragana>をお使いください。

ローマ字変換のオプションは関数の２番目の引数でハシュリファレンスとして入る。

     $kana = romaji2kana ($romaji, {wapuro => 1});

長音「ou」を「オー」ではなく、「オウ」にしたいときはwapuroを真にします C<< wapuro => 1 >>。

     $kana = romaji2kana ($romaji, {ime => 1});

C<< ime => 1 >>オプションでIMEのような変換ができます。たとえば、"gumma"が「グッマ」、"onnna"が「オンナ」となります。パスポートローマ字 ("Ohshimizu") は無効となります。

これはどんな入力でも仮名に変換しようとします。ローマ字日本語の確認のためにはL</is_romaji>、L</is_romaji_strict>、L</is_romaji_semistrict>もあります。
%%
eg: $kana = romaji2kana ('yamaguti');
expect: ヤマグチ
name: romaji2kana
out: $kana

%%desc.en:
Given an argument, this returns a true value if it is a known style of
romanization.

Without an argument, it returns a list of possible styles, as an array
of hash references, with each hash reference containing the short name
under the key "abbrev" and the full name under the key "full_name".
%%
%%desc.ja:
引数があれば、その引数をローマ字方法として認めるなら真、認めないなら偽です。

引数がなければ、すべてのローマ字方法をハシュリファレンスの列として戻します。
%%
%%eg:
my @styles = romaji_styles ();
# Returns a true value
romaji_styles ("hepburn");
# Returns the undefined value
romaji_styles ("frogs");
%%
name: romaji_styles

desc.en: Returns a list of valid styles of romaji vowels.
desc.ja: 有効な母音スタイルのリスト・レファレンス
name: romaji_vowel_styles

class: kana
explain.en: These functions convert one form of kana into another.
explain.ja: 仮名を仮名に変換する関数。

%%desc.en:
This function converts any of hiragana, halfwidth katakana, or romaji
input into katakana. It also converts various confusable kanji
characters into kana. For example the "one" kanji 一 is converted into
a L</chouon>, ー, and the "mouth" kanji 口 is converted into the
katakana ロ (ro).

This is used as the "front end" function for L<this katakana to
English web application|https://www.sljfaq.org/cgi/k2e.cgi>.
%%
%%desc.ja:
雑な仮名遣いや間違ったかな入力を直します。ローマ字やひらがなを片仮名に変換します。仮名として漢字を使うような間違いも直します。例えば「一」（漢字のいち）を「ー」（長音）に。
%%
name: cleanup_kana
since: 0.46

%%desc.en:
C<hira2kata> converts hiragana into katakana. The input may be a
single string or a list of strings. If the input is a list, it
converts each element of the list, and in list context it returns a
list of the converted inputs. In scalar context it returns a
concatenation of the strings.

    my @katakana = hira2kata (@hiragana);

This does not convert L</chouon> signs.
%%
desc.ja: 平仮名をかたかなに変換します。長音符は変わりません。（「オー」は「おう」になりません。）
eg: $katakana = hira2kata ('ひらがな');
expect: ヒラガナ
name: hira2kata
out: $katakana

%%desc.en:
C<hw2katakana> converts L</halfwidth katakana> and halfwidth Japanese
punctuation to fullwidth katakana and fullwidth punctuation. Its
function is similar to the Emacs command
C<japanese-zenkaku-region>. For the opposite function, see L<kana2hw>.
%%
desc.ja: 半角カタカナを全角カタカナに変換します。
eg: $full_width = hw2katakana ('ｱｲｳｶｷｷﾞｮｳ｡');
expect: アイウカキギョウ。
name: hw2katakana
out: $full_width

%%desc.en:
C<InHankakuKatakana> is a character class for use in regular
expressions with C<\p> which can validate L</halfwidth katakana>.
%%
desc.ja: C<InHankakuKatakana>は正規表現に使う半角カタカナにマッチします。
%%eg:
use utf8;
if ('ｱ' =~ /\p{InHankakuKatakana}/) {
    print "ｱ is half-width katakana\n";
}
%%
name: InHankakuKatakana

%%desc.en:
A character class for use in regular expressions which matches all
kana characters. This class catches meaningful combinations of
hiragana, katakana, halfwidth katakana, circled katakana, and katakana
combined words. It does not match the hentaigana characters of
Unicode.

This is a combination of the existing Perl character classes
C<Katakana>, C<InKatakana>, and C<InHiragana>, minus unassigned
characters, plus the "halfwidth katakana prolonged sound mark"
(U+FF70) <ｰ> (chouon), the "halfwidth katakana voiced sound mark"
(U+FF9E) <ﾞ> (L</dakuten>) and the "halfwidth katakana semivoiced
sound mark" (U+FF9F) <ﾟ> (L</handakuten>), minus '・', Unicode 30FB,
"KATAKANA MIDDLE DOT". It is somewhat like the following:

    qr/\p{Katakana}|\p{InKatakana}|\p{InHiragana}|ｰ|ﾞ|ﾟ>/

except that the unassigned points which are matched by C<\p{Katakana}>
are not matched and KATAKANA MIDDLE DOT is not matched.
%%
%%desc.ja:
正規表現に使うかたかなとひらがなにマッチします。

詳しくいうと以下の正規表現

    qr/\p{Katakana}|\p{InKatakana}|\p{InHiragana}|ｰ|ﾞ|ﾟ>/

と殆ど同じことにマッチしますが、C<\p{Katakana}>がマッチする未使用のコードポイントはマッチしません。「・」もマッチしません。変体仮名もマッチしません。
%%
eg: $is_kana = ('アイウエオ' =~ /^\p{InKana}+$/);
expect: 1
name: InKana
out: $is_kana

%%desc.en:
This function returns a true value if its argument is a string of
hiragana, and an undefined value if not. The entire string from
beginning to end must all be kana for this to return true. The kana
cannot include punctuation marks or L</chouon>.
%%
desc.ja: 入力が平仮名のみの場合、真、入力が平仮名なでない文字を含む場合、偽(undef)。「ー」があれば偽になります。
eg: 
name: is_hiragana

%%desc.en:
This function returns a true value if its argument is a string of
kana, or an undefined value if not. The input cannot contain
punctuation or L</chouon>.
%%
desc.ja: 入力が仮名のみの場合、真、入力が仮名なでない文字を含む場合、偽(undef)。
eg: 
name: is_kana

%%desc.en:
Join L</dakuten> and L</handakuten> (Unicode U+3099-U+309C) to kana
where possible. Where they cannot be joined, strip them out. This only
works on full width kana. The return value is the joined text.
%%
desc.ja: 濁点、半濁点をできる限り仮名につけます。「カ゛」-> 「ガ」など。残っている濁点を消します。
eg: $joined = join_sound_marks ('か゛は゜つ゛');
expect: がぱづ
name: join_sound_marks
out: $joined
since: 0.53

%%desc.en:
C<kana2hw> converts hiragana, katakana, and fullwidth Japanese
punctuation to L</halfwidth katakana> and halfwidth punctuation. Its
function is similar to the Emacs command C<japanese-hankaku-region>.
For the opposite function, see L<hw2katakana>. See also
L</katakana2hw> for a function which only converts katakana.
%%
desc.ja: あらゆる仮名文字を半角カタカナに変換します。かたかなのみを変換する場合はL</katakana2hw>を使ってください。
eg: $half_width = kana2hw ('あいウカキぎょう。');
expect: ｱｲｳｶｷｷﾞｮｳ｡
name: kana2hw
out: $half_width

%%desc.en:
This converts any of katakana, L</halfwidth katakana>, circled
katakana and hiragana to full width katakana. It also joins
L</dakuten> and L</handakuten> marks to kana where possible, or
removes them, using L</join_sound_marks>.
%%
%%desc.ja:
全角かたかな、ひらがな、半角かたかな、丸かたかななどあらゆる「仮名」を全角かたかなに変換します。濁点と半濁点をL</join_sound_marks>により仮名に付けます。付けられない仮名は消します。
%%
eg: 
name: kana2katakana

%%desc.en:
Convert small-sized kana such as 「ぁ」 into full-sized kana such as
「あ」.
%%
desc.ja: 「ぁ」など小さい仮名を「あ」に変換します。
eg: $large = kana_to_large ('ぁあぃい');
expect: ああいい
name: kana_to_large
out: $large

%%desc.en:
C<kata2hira> converts full-width katakana into hiragana. If the input
is a list, it converts each element of the list, and in list context,
returns a list of the converted inputs, otherwise it returns a
concatenation of the strings.

    my @hiragana = hira2kata (@katakana);

This function does not convert L</chouon> signs into long vowels. It
also does not convert half-width katakana into hiragana.
%%
desc.ja: かたかなを平仮名に変換します。長音符は変換しません。半角かたかなを変換しません。
eg: $hiragana = kata2hira ('カキクケコ');
expect: かきくけこ
name: kata2hira
out: $hiragana

%%desc.en:
This converts katakana to L</halfwidth katakana>, leaving hiragana
unchanged. See also L</kana2hw>.
%%
desc.ja: 全角かたかなを半角かたかなに変換し、ひらがなをそのままにします。L</kana2hw>も参照。
eg: $hw = katakana2hw ("あいうえおアイウエオ");
expect: あいうえおｱｲｳｴｵ
name: katakana2hw
out: $hw

desc.en: Convert katakana into a square thing if possible.
desc.ja: 可能なかぎり、「ウォン」を「㌆」にするなど。
eg: $sq = katakana2square ('カロリーアイウエオウォン');
expect: ㌍アイウエオ㌆
name: katakana2square
out: $sq

%%desc.en:
This breaks the given string into syllables. If the string is broken
up character by character, it becomes 'ソ', 'ー', 'シ', 'ャ', 'ル'.
However, by themselves, 'ー' and 'ャ' can't be spoken.

This breaks the string up into pronouncable syllables, so that
C<$syllables> becomes 'ソー', 'シャ', 'ル'. A L</syllabic n> is
attached to the preceding sequence, so for example フラナガン is
broken up into four syllables, フ, ラ, ナ, ガン.

This routine is used as the basis of this L<Change your name to kanji
web application|https://www.sljfaq.org/cgi/name-kanji.cgi>. The name
is converted from English to kana, then this function is used to break
the kana name into pieces to which a kanji may be attached. It's also
used in L<this Katakana to English
converter|https://www.sljfaq.org/cgi/k2e.cgi> for the case that no
words can be matched, and suggestions are made for how to split the
word into possible components.
%%
%%desc.ja:
カタカナをシラブルにわけます。たとえば、「ソーシャル」をC<split>などで文字に分けると'ソ', 'ー', 'シ', 'ャ', 'ル'になりますがソ、シ、ルは言えるのに、「ー」と「ャ」は口にできない文字です。なのでこの間数は日本語の「原子」の'ソー', 'シャ', 'ル'にわけます。撥音(ん)は前の仮名と一つになります。例えば、「フラナガン」は「フ」, 「ラ」, 「ナ」, 「ガン」となります。

元々の作った理由はL<外国人の宛字名前制作|https://www.sljfaq.org/cgi/name-kanji_ja.cgi>のためでした。外国人の名前を仮名に変換した後に、その当て字を当てるためにそのかなをシラブルに分けます。その他の利用はL<カタカナを英語に変換|https://www.sljfaq.org/cgi/k2e_ja.cgi>で、片仮名が何もマッチしない場合、言葉を部分に分けるために使っています。
%%
eg: $syllables = katakana2syllable ('ソーシャルブックマークサービス');
name: katakana2syllable
since: 0.24

%%desc.en:
Given a list of kana, add all the possible versions of the words with
the first kana with either a L</dakuten> or a L</handakuten> added.

This was intended for a search for a particular kanji in a
dictionary. It is not actually in use anywhere at the moment.
%%
%%desc.ja:
一番最初のかなに濁点又は半濁点をつけます。

漢字を探すために使う予定だったのですが、現在使っていません。
%%
%%eg:
my @list = (qw/カン スウ ハツ オオ/);
nigori_first (\@list);
# Now @list = (qw/カン スウ ハツ オオ ガン ズウ バツ パツ/);
%%
name: nigori_first
since: 0.36

%%desc.en:
Given katakana input, convert possible "old-style" kana usage with
large kanas used for L</youon> or L</sokuon> into smaller kana. If the
conversion succeeds, return the converted value, otherwise return the
undefined value. (I found the undefined value works better as a return
value on failure than returning the text itself, since it saves the
user from having to check whether the text has changed.)

The conversion is not intelligent, it just attempts
to do as much as possible, so although it will work to convert
"shiyotsuchiyuu" ("シヨツチユウ") into "shotchuu" ("ショッチュウ"), it
will also do stupid things like converting "chiyoda" (ちよだ) into
"choda" (ちょだ).
%%
%%desc.ja:
試しに、モースコードなど、「っ」や「ゃゅょ」がない片仮名を拗音(ゃゅょ)と促音(っ)がある片仮名に変えます。昔の仮名使いを現代のに直すなどに使います。正確に変えることではなく、できるだけ変えることしますので、たとえば正確に「シヨツチユウ」を「ショッチュウ」にはするものの「ちよだ」を「ちょだ」にもしますので、頭の良い関数ではなく、最大限に変換する関数です。
%%
eg: $smallize = smallize_kana ('オキヤクサマガカツタ');
expect: オキャクサマガカッタ
name: smallize_kana
out: $smallize
since: 0.46

%%desc.en:
Split L</dakuten> and L</handakuten> from kana where possible. U+309B
and U+309C are chosen rather than U+3099 and U+309A. (This choice was
somewhat arbitrary. I'm not sure which of the pairs should be used. I
chose these because they were the ones already in use internally in
the module in L</kana2braille> and L</kana2morse>.) This only
works on full width kana. The return value is the split text.
%%
desc.ja: 濁点、半濁点を仮名からわけます。-> 「が」-> 「か゛」など。半濁点はU+309B、濁点はU+309Cとなります。
eg: $split = split_sound_marks ('ガパヅ');
expect: カ゛ハ゜ツ゛
name: split_sound_marks
out: $split
since: 0.53

desc.en: Convert a square katakana box into its components.
desc.ja: 「㌆」を「ウォン」にするなど。
eg: $kata = square2katakana ('㌆');
expect: ウォン
name: square2katakana
out: $kata

class: hentaigana
%%explain.en:
Variant kana forms. Hentaigana are new in Unicode 10.0 (June 2017).
%%
explain.ja: 変体仮名はUnicode 10.0 (２０１７年６月）にあたらしいです。

%%desc.en:
Convert hentaigana into hiragana. Hentaigana with multiple
interpretations are converted into a list of kana separated by a
middle dot character.
%%
desc.ja: 変体仮名をひらがなに変換します。複数のかなにあてはまる変体仮名は「・」でつないだ列になります。
name: hentai2kana
since: 0.43

desc.en: Convert hentaigana into their equivalent kanji.
desc.ja: 変体仮名を漢字に変換します。
eg: $kanji = hentai2kanji ('𛀢');
expect: 家
name: hentai2kanji
out: $kanji
since: 0.43

%%desc.en:
Convert kana to equivalent hentaigana. If more than one hentaigana
exists, they are returned joined with a middle dot. The L</dakuten>
and L</handakuten> are split out of the kana using
L</split_sound_marks> before the conversion.
%%
%%desc.ja:
あてはまる変体仮名があるかぎり、普通の仮名を変体仮名に変換します。複数の仮名があれば、「・」で分けます。濁点と半濁点はL</split_sound_marks>により仮名と分けてから変換します。
%%
eg: $hentai = kana2hentai ('ケンブ');
expect: 𛀢・𛀲・𛀳・𛀴・𛀵・𛀶・𛀷𛄝・𛄞𛂰・𛂱・𛂲゛
name: kana2hentai
out: $hentai
since: 0.43

desc.en: Convert kanji to equivalent hentaigana, where they exist.
desc.ja: あてはまる変体仮名があるかぎり、漢字を変体仮名に変換します。
eg: $kanji = kanji2hentai ('家');
expect: 𛀢
name: kanji2hentai
out: $kanji
since: 0.43

class: wide
explain.en: Functions for handling L</wide ASCII>.
explain.ja: 全角英数字の変換・認識。

%%desc.en:
Convert ASCII into L</wide ASCII>. It also converts the ASCII space,
ASCII C<0x20> into a fullwidth space, C<U+3000>.
%%
desc.ja: 半角英数字(ASCII)を全角英数字に変換します。
eg: $wide = ascii2wide ('abCE019');
expect: ａｂＣＥ０１９
name: ascii2wide
out: $wide

%%desc.en:
This is a character class for use with \p which matches L</wide
ASCII>. It also matches the fullwidth space, C<U+3000>.
%%
desc.ja: 正規表現に使う全角英数字にマッチします。
%%eg:
use utf8;
if ('Ａ' =~ /\p{InWideAscii}/) {
    print "Ａ is wide ascii\n";
}
%%
name: InWideAscii

%%desc.en:
Convert L</wide ASCII> into ASCII. It also converts the fullwidth
space, C<U+3000>, into an ASCII space, ASCII C<0x20>.
%%
desc.ja: 全角英数字を半角英数字(ASCII)に変換します。
eg: $ascii = wide2ascii ('ａｂＣＥ０１９');
expect: abCE019
name: wide2ascii
out: $ascii

class: other

desc.en: Converts Japanese braille (I<tenji>) into the equivalent katakana.
desc.ja: 点字をかたかなに変換します。
eg: 
name: braille2kana

%%desc.en:
This function converts the "circled katakana" of Unicode into
full-width katakana. See also L</kana2circled>.
%%
desc.ja: 丸がついているかたかなを全角かたかなに変換します。
eg: $kana = circled2kana ('㋐㋑㋒㋓㋔');
expect: アイウエオ
name: circled2kana
out: $kana

%%bugs.en:
This is not an adequate Japanese braille converter. Creating Japanese
braille requires breaking Japanese sentences up into individual words,
but this does not attempt to do that. People who are interested in
building a Perl braille converter could start here.
%%
%%bugs.ja:
きちんとしたてすとがありません。日本語を本物の点字に変換することはわたちがきが必要ですがこの関数はそれをしませんので、不十分な変換機能です。
%%
%%desc.en:
This converts kana into the equivalent Japanese braille (I<tenji>)
forms.
%%
desc.ja: 仮名を点字に変換します。
eg: 
name: kana2braille

%%desc.en:
This function converts kana into the "circled katakana" of Unicode,
which have code points from 32D0 to 32FE. See also L</circled2kana>.

There is no circled form of the ン kana, L</syllabic n>, so this is
left untouched. The L</dakuten> and L</handakuten> are split from the
kana using L</split_sound_marks>.

Circled katakana appear as Unicode code points U+32D0 to U+32FE.
%%
%%desc.ja:
仮名を丸付けかたかなに変換します。丸付け「ン」がありませんので、「ン」はそのままとなります。濁点・半濁点はL</split_sound_marks>により仮名から分けられてから変換されたので、「が」が「㋕゛」になります。

丸付け片假名はユニコード32D0〜32FEにあります。
%%
eg: $circled = kana2circled ('アイウエオガン');
expect: ㋐㋑㋒㋓㋔㋕゛ン
name: kana2circled
out: $circled

%%desc.en:
Convert Japanese kana into Morse code. Japanese morse code does not
have any way of representing small kana characters, so converting to
and then from morse code will result in ショッチュウ becoming シヨツチユウ.
The function L</smallize_kana> may work to fix these outputs in some cases.
%%
%%desc.ja:
かなをもーすこーどに変換します。日本語のもーすこーどは「っ」など小さいかなを表現できないので、仮名をもーすこーどにして、もーすこーどからまた仮名にする場合は「しょっちゅう」が「シヨツチユウ」になります。
%%
eg: $morse = kana2morse ('ショッチュウ');
expect: --.-. -- .--. ..-. -..-- ..-
name: kana2morse
out: $morse

%%desc.en:
Convert Japanese Morse code into kana. Each Morse code element must be separated by whitespace from the next one.
%%
desc.ja: モースコードをかなに変換します。（本物のもーすこーどは分かち書きが必要です。）
eg: $kana = morse2kana ('--.-. -- .--. ..-. -..-- ..-');
expect: シヨツチユウ
name: morse2kana
out: $kana

class: kanji

%%desc.en:
Returns a list of kanji with negative meanings. See also
L<https://www.lemoda.net/japanese/offensive-kanji/index.html>.
%%
%%desc.ja:
否定的な意味（病名、不愉快な物、軽率の意味など）の漢字。
L<https://www.lemoda.net/japanese/offensive-kanji/index.html>。
%%
eg: my @bad_kanji = bad_kanji ();
name: bad_kanji
since: 0.47

desc.en: Convert bracketed form of kanji into unbracketed form.
desc.ja: 括弧漢字を普通の漢字に変換します。
eg: $kanji = bracketed2kanji ('㈱');
expect: 株
name: bracketed2kanji
out: $kanji

desc.en: Convert the circled forms of kanji into their uncircled equivalents.
desc.ja: 丸付け漢字を普通の漢字に変換します。
eg: $kanji = circled2kanji ('㊯');
expect: 協
name: circled2kanji
out: $kanji

%%desc.en:
Convert an unbracketed form of kanji into bracketed form, if it
exists, otherwise do nothing with it.
%%
desc.ja: 普通の漢字を括弧漢字に変換します。括弧形がある漢字は数少ないので、ご了承ください。当てはまる括弧漢字がなければ、そのままにします。
eg: $kanji = kanji2bracketed ('株');
expect: ㈱
name: kanji2bracketed
out: $kanji

%%desc.en:
Convert the usual forms of kanji into circled equivalents, if they
exist. Note that only a limited number of kanji have circled forms.
%%
desc.ja: 漢字を丸付け漢字に変換します。
eg: $kanji = kanji2circled ('協嬉');
expect: ㊯嬉
name: kanji2circled
out: $kanji

%%bugs.en:
The list of characters in this converter may not contain every pair of
old/new kanji.

It will not correctly convert 弁 since this has three different
equivalents in the old system.
%%
bugs.ja: 新旧字体の情報は確認不足です。「弁」は旧字体が三つありますなので、変換不可能です。
%%desc.en:
Convert new-style (post-1949) kanji (Chinese characters) into old-style (pre-1949) kanji.
%%
desc.ja: 親字体を旧字体に変換します。
eg: $old = new2old_kanji ('三国 連太郎');
expect: 三國 連太郎
name: new2old_kanji
out: $old

%%desc.en:
Convert old-style (pre-1949) kanji (Chinese characters) into new-style
(post-1949) kanji.
%%
desc.ja: 旧字体を親字体に変換します。
eg: $new = old2new_kanji ('櫻井');
expect: 桜井
name: old2new_kanji
out: $new

%%desc.en:
Returns a list of the yurei moji (幽霊文字), kanji which don't
actually exist but were mistakenly included in a computer
standard. See L<https://www.sljfaq.org/afaq/yuureimoji.html> for more
information.
%%
%%desc.ja:
幽霊文字（実際には存在しない漢字）。L<https://www.wdic.org/w/WDIC/%E5%B9%BD%E9%9C%8A%E6%96%87%E5%AD%97>ご参照ください。こちらのページの典拠不詳・典拠不明・同定不能の字です。
%%
eg: my @yurei = yurei_moji ();
name: yurei_moji
since: 0.47

class: cyrillization
%%explain.en:
This is an experimental cyrillization of kana based on the information
in a Wikipedia article,
L<http://en.wikipedia.org/wiki/Cyrillization_of_Japanese>. The module
author does not know anything about cyrillization of kana, so any
assistance in correcting this is very welcome.
%%
explain.ja: 実験的に仮名とキリル文字の変換をする。キリル文字に詳しい方の確認がありませんので、その結果をよく確認しますように。

eg: $kana = cyrillic2katakana ('симбун');
expect: シンブン
name: cyrillic2katakana
out: $kana

eg: $cyril = kana2cyrillic ('シンブン');
expect: симбун
name: kana2cyrillic
out: $cyril

class: hangul

%%bugs.en:
=over

=item May be incorrect

This is based on lists found on the internet at
L<http://kajiritate-no-hangul.com/kana.html> and
L<http://lesson-hangeul.com/50itiranhyo.html>. There is currently no
proof of correctness.

=item No reverse conversion

There is currently no hangul to kana conversion.

=back
%%
%%bugs.ja:
=over

=item 確認がありません

L<http://kajiritate-no-hangul.com/kana.html>とL<http://lesson-hangeul.com/50itiranhyo.html>を元にして使りみましたが正しいかどうかわかりません。

=item 逆変換がありません

ハングルから仮名への変換機能はありません。

=back
%%
eg: $hangul = kana2hangul ('すごわざ');
expect: 스고와자
%%explain.en:
Convert kana into hangul (Korean letters). See also
L<Lingua::KO::Munja>.
%%
explain.ja: かなをハングルに変換します。L<Lingua::KO::Munja>もご利用ください。
name: kana2hangul
out: $hangul

