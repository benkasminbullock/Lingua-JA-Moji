class: romanization
%%explain.en:

These functions convert Japanese letters to and from romanized forms.

%%
%%explain.ja:

かな ⇄ ローマ字

%%

name: kana2romaji
%%eg:

$romaji = kana2romaji ("うれしいこども");

%%
out: $romaji
expect: uresîkodomo
%%desc.en:

Convert kana to a romanized form.

An optional second argument, a hash reference, controls the style of
conversion.

    use utf8;
    $romaji = kana2romaji ("しんぶん", {style => "hepburn"});
    # $romaji = "shimbun"

The options are

=over

=item style

The style of romanization. The default style of romanization is
"Nippon-shiki". The user can set the conversion style to "hepburn" or
"passport" or "kunrei" or "common". If Hepburn is selected, then the
following option C<use_m> is set to "true", and the C<ve_type> is set
to "macron". The "common" style is the same as the Hepburn style, but
it does things like changing "ジェット" to "jetto" rather than
ignoring the small vowel.

Possible styles are as follows:

=over

=item none/empty

Without a style, the L<Nippon-shiki
romanization|http://www.sljfaq.org/afaq/nippon-shiki.html> is
used.

=item hepburn

This gives L<Hepburn romanization|http://www.sljfaq.org/afaq/hepburn.html>.

=item kunrei

This is L<the form of romanization used in childrens'
education|http://www.sljfaq.org/afaq/kunrei-shiki.html>.

=item common

This is a modification of the Hepburn system which also changes
combinations of large kana + small vowel kana into the commonest
romanized form. For example "ジェット" becomes "jetto" and "ウェ"
becomes "we".

=back

=item use_m

If this is true, L</syllabic n>s (ん) which come before "b" or "p"
sounds, such as the first "n" in "shinbun" (しんぶん, newspaper) will
be converted into "m" rather than "n".

=item ve_type

The C<ve_type> option controls how long vowels are written. The
default is to use circumflexes to represent long vowels.

=over

=item undef

A circumflex is used.

=item macron

A macron is used.

=item passport

"Oh" is used to write long "o" vowels, and other long vowels are
ignored.

=item none

Long vowels are not indicated.

=item wapuro

The L</chouon> marks become hyphens, and おう becomes ou.

=back

=item wo

     kana2romaji ("ちりぬるを", { wo => 1 });

If "wo" is set to a true value, "を" becomes "wo", otherwise it
becomes "o".

=back

%%
%%desc.ja:

仮名をローマ字に変換。

オプションは関数の２番目の引数でハシュリファレンスとして入ります。

    use utf8;
    $romaji = kana2romaji ("しんぶん", {style => "hepburn"});
    # $romaji = "shimbun"

可能なオプションは

=over

=item style

ローマ字の種類。

=over

=item undef

ディフォルトは日本式（「つづり」が「tuduri」, 「少女」が「syôzyo」）。

=item passport

パスポート式（「いとう」が「itoh」になります。）

=item kunrei

訓令式（小学校４年生が習うローマ字法）

=item hepburn

ヘボン式（「つづり」が「tsuzuri」, 「少女」が「shōjo」）。
これを選べば、下記のuse_mが真になり、ve_typeがmacronになります。

=item common

「ジェット」が「jetto」になります。「ウェ」が「we」になります。つまり普通のローマ字です。

=back

=item use_m

真なら「しんぶん」が「shimbun」、「ぐんま」が「gumma」
偽なら「しんぶん」が「shinbun」、「ぐんま」が「gunma」

=item ve_type

長い母音はどの様に表現するか選ぶために使います。

=over

=item undef

曲折アクセント(ô)を使います。

=item macron

マクロン(ō)を使います。

=item passport

「アー」、「イー」、「ウー」、「エー」が「a」, 「i」, 「u」, 「e」になり、「オー」が「oh」になります。

=item none

「アー」、「イー」、「ウー」、「エー」が「a」, 「i」, 「u」, 「e」, 「o」になります。

=item wapuro

「アー」、「イー」、「ウー」、「エー」が「a-」, 「i-」, 「u-」, 「e-」,
「o-」になります。「おう」が「ou」など、仮名の長音を仮名で代表するよう、ロー
マ字入力のようなことです。

=back

=item wapuro

ワープロローマ字。長音符を使いません。「少女」が「shoujo」など、ASCIIのみの記号で表記するローマ字です。

=item wo

     kana2romaji ("ちりぬるを", { wo => 1 });

"wo"が真なら、「を」が"wo"になります。そうでもない場合は"o"になります。

=back

%%

name:  romaji2kana
%%eg:


$kana = romaji2kana ('yamaguti');

%%
out: $kana
expect: ヤマグチ
%%desc.en:

Convert romanized Japanese to katakana. The romanization is highly
liberal and will attempt to convert any romanization it sees into
katakana. The rules of romanization are based on the behaviour of the
Microsoft IME (input method editor). To convert romanized Japanese
into hiragana, use L</romaji2hiragana>.

An optional second argument to the function contains options in the
form of a hash reference,

     $kana = romaji2kana ($romaji, {wapuro => 1});

Use an option C<< wapuro => 1 >> to convert long vowels into the
equivalent kana rather than L</chouon>.

     $kana = romaji2kana ($romaji, {ime => 1});

Use the C<< ime => 1 >> option to approximate the behaviour of an
IME. For example, input "gumma" becomes グッマ and input "onnna"
becomes オンナ. Passport romaji ("Ohshimizu") is disallowed if this
option is switched on.

%%
%%desc.ja:

ローマ字をカタカナに変換します。ローマ字はできるだけ幅広く受け入れる。
ローマ字をひらがなに変換したいときはL</romaji2hiragana>をお使いください。

ローマ字変換のオプションは関数の２番目の引数でハシュリファレンスとして入る。

     $kana = romaji2kana ($romaji, {wapuro => 1});

長音「ou」を「オー」ではなく、「オウ」にしたいときはwapuroを真にします C<< wapuro => 1 >>。

     $kana = romaji2kana ($romaji, {ime => 1});

C<< ime => 1 >>オプションでIMEのような変換ができます。たとえば、"gumma"が「グッマ」、"onnna"が「オンナ」となります。パスポートローマ字 ("Ohshimizu") は無効となります。

%%

name:  romaji2hiragana
%%eg:

$hiragana = romaji2hiragana ('babubo');

%%
out: $hiragana
expect: ばぶぼ
%%desc.en:

Convert romanized Japanese into hiragana. This takes the same options
as L</romaji2kana>. It also switches on the "wapuro" option, which
uses long vowels with a kana rather than a L</chouon>.

%%
%%desc.ja:

ローマ字をひらがなに変関します。オプションはL</romaji2kana>と同じ。wapuroオプション
もオンにしたら、「ou」が「おー」ではなく、「おう」になります。

%%

name:  romaji_styles
%%eg:


my @styles = romaji_styles ();
# Returns a true value
romaji_styles ("hepburn");
# Returns the undefined value
romaji_styles ("frogs");

%%
%%desc.en:

Given an argument, this return a true value if it is a known style of
romanization.

Without an argument, it returns a list of possible styles, as an array
of hash references, with each hash reference containing the short name
under the key "abbrev" and the full name under the key "full_name".

%%
%%desc.ja:

引数があれば、その引数をローマ字方法として認めるなら真、認めないなら偽です。

引数がなければ、すべてのローマ字方法をハシュリファレンスの列として戻します。

%%

name:  is_voiced
%%eg:

if (is_voiced ('が')) {
     print "が is voiced.\n";
}

%%
%%desc.en:

Given a kana or romaji input, C<is_voiced> returns a true value if the
sound is a voiced sound like I<a>, I<za>, I<ga>, etc. and the
undefined value if not.

%%
%%desc.ja:

仮名かローマ字は濁音（゛）、半濁音（゜）がついていれば、真、ついていなければ偽（undef)。

%%

name:  is_romaji
%%eg:


# The following line returns "undef"
is_romaji ("abcdefg");
# The following line returns a defined value
is_romaji ('loyehye');
# The following line returns a defined value
is_romaji ("atarimae");

%%
%%desc.en:

This detects whether a string of alphabetical characters, which may
also include characters with macrons or circumflexes, "looks like"
romanized Japanese. If the test is successful, it returns a true
value, and if the test is unsuccessful, it returns a false value. If
the string is empty, it returns a false value.

This works by converting the string to kana via L</romaji2kana> and
seeing if it converts cleanly or not.

The "true" value returned is the output of the round-trip conversion,
converted into wapuro format.

%%
%%desc.ja:

アルファベットの列はローマ字に見えるなら真、見えないなら偽を戻します。
厳密に確認したい時はL</is_romaji_strict>をお勧めします。

真の戻し値はローマ字のワープロ変換。

%%

name:  is_romaji_strict
%%eg:


# The following line returns "undef"
is_romaji_strict ("abcdefg");
# The following line returns "undef"
is_romaji_strict ('loyehye');
# The following line returns a defined value
is_romaji_strict ("atarimae");

%%
%%desc.en:

This detects whether a string of alphabetical characters, which may
also include characters with macrons or circumflexes, "looks like"
romanized Japanese. If the test is successful, it returns a true
value, and if the test is unsuccessful, it returns a false value. If
the string is empty, it returns a false value.

This test is much stricter than L</is_romaji>. It insists that the
word does not contain constructions which may be valid as inputs to an
IME, but which do not look like Japanese words.

The "true" value returned is the output of the round-trip conversion,
converted into wapuro format.

%%
%%desc.ja:

アルファベットの列はローマ字に見えるなら真、見えないなら偽。
L</is_romaji>より厳しく、コンピューター入力に見えるかどうかではなく、
「日本語になる」かどうか確認します。

真の値はローマ字のワープロ変換です。

%%

name:  is_romaji_semistrict
%%eg:

# The following line returns "undef"
is_romaji_semistrict ("abcdefg");
# The following line returns "undef"
is_romaji_semistrict ('loyehye');
# The following line returns a defined value
is_romaji_semistrict ("atarimae");
# The following line returns a defined value
is_romaji_semistrict ("pinku no dorufin");

%%
%%desc.en:

Halfway between L</is_romaji> and L</is_romaji_strict>, this allows
some formations like "pinku no dorufin" but not the really unlikely
stuff which "is_romaji" allows.

%%
%%desc.ja:

L</is_romaji_strict>とL</is_romaji>の間にローマ字ですが厳密に日本語ではない言葉もあります。例えば、"pinku no dorufin"は「ピンク ノ ドルフィン」というカタカナになりますが純粋日本語ではありません。is_romaji_semistrictはこういう言葉をみとめても、is_romajiのように出鱈目の文字を許さないというものです。

%%

name:  normalize_romaji
%%eg:

$normalized = normalize_romaji ('tsumuji');

%%
%%desc.en:

C<normalize_romaji> converts romanized Japanese to a canonical form,
which is based on the Nippon-shiki romanization, but without
representing long vowels using a circumflex. In the canonical form,
sokuon (っ) characters are converted into the string "xtu". If there
is kana in the input string, this will also be converted to romaji.

C<normalize_romaji> is for comparing two Japanese words which may be
represented in different ways, for example in different romanization
systems, to see if they refer to the same word despite the difference
in writing. It does not provide a standardized or
officially-sanctioned form of romanization.

%%
%%desc.ja:

C<normalize_romaji>はかなやローマ字で書いた言葉を比べるため、かなやローマ字の言葉を決まったローマ字の書き方になおします。この「決まった」ローマ字は本モジュール限定のもので、あくまでも違ったかなや違ったローマ字法で書いた言葉を比べるためだけのものに過ぎませんので、正式なローマ字法と間違わないようによろしくおねがいします。

%%

class: kana
%%explain.en:

These functions convert one form of kana into another.

%%
%%explain.ja:

仮名を仮名に変換する関数。

%%

name:  hira2kata
%%eg:

$katakana = hira2kata ('ひらがな');

%%
out: $katakana
expect: ヒラガナ
%%desc.en:

C<hira2kata> converts hiragana into katakana. The input may be a
single string or a list of strings. If the input is a list, it
converts each element of the list, and in list context it returns a
list of the converted inputs. In scalar context it returns a
concatenation of the strings.

    my @katakana = hira2kata (@hiragana);

This does not convert L</chouon> signs.

%%
%%desc.ja:

平仮名をかたかなに変換します。長音符は変わりません。（「オー」は「おう」になりません。）

%%

name:  kata2hira
%%eg:


$hiragana = kata2hira ('カキクケコ');

%%
out: $hiragana
expect:  かきくけこ
%%desc.en:

C<kata2hira> converts full-width katakana into hiragana. If the input
is a list, it converts each element of the list, and in list context,
returns a list of the converted inputs, otherwise it returns a
concatenation of the strings.

    my @hiragana = hira2kata (@katakana);

This function does not convert L</chouon> signs into long vowels. It
also does not convert half-width katakana into hiragana.

%%
%%desc.ja:

かたかなを平仮名に変換します。長音符は変換しません。半角かたかなを変換しません。

%%

name:  kana2katakana
%%eg:

%%
%%desc.en:

This converts any of katakana, L</halfwidth katakana>, circled katakana
and hiragana to full width katakana.

%%
%%desc.ja:

全角かたかな、ひらがな、半角かたかな、丸かたかななどあらゆる「仮名」を全角かたかなに変換します。

%%

name: kana_to_large
%%eg:

$large = kana_to_large ('ぁあぃい');

%%
out: $large
expect: ああいい
%%desc.en:

Convert small-sized kana such as 「ぁ」 into full-sized kana such as
「あ」.

%%
%%desc.ja:

「ぁ」など小さい仮名を「あ」に変換します。

%%

name: nigori_first
%%eg:

my @list = (qw/カン スウ ハツ オオ/);
nigori_first (\@list);
# Now @list = (qw/カン スウ ハツ オオ ガン ズウ バツ パツ/);

%%desc.en:

Given a list of kana, add all the possible versions of the words with
the first kana with either a dakuten or a handakuten added.

%%
%%desc.ja:

一番最初のかなに濁点又は半濁点をつけます。

%%

name:  InHankakuKatakana
%%eg:

use utf8;
if ('ｱ' =~ /\p{InHankakuKatakana}/) {
    print "ｱ is half-width katakana\n";
}

%%
%%desc.en:

C<InHankakuKatakana> is a character class for use in regular
expressions with C<\p> which can validate L</halfwidth katakana>.

%%
%%desc.ja:

C<InHankakuKatakana>は正規表現に使う半角カタカナにマッチします。

%%

name:  kana2hw
out: $half_width
expect: ｱｲｳｶｷｷﾞｮｳ｡
%%eg:

$half_width = kana2hw ('あいウカキぎょう。');

%%
%%desc.en:

C<kana2hw> converts hiragana, katakana, and fullwidth Japanese
punctuation to L</halfwidth katakana> and halfwidth punctuation. Its
function is similar to the Emacs command C<japanese-hankaku-region>.
For the opposite function, see L<hw2katakana>. See also
L</katakana2hw> for a function which only converts katakana.

%%
%%desc.ja:

あらゆる仮名文字を半角カタカナに変換します。かたかなのみを変換する場合はL</katakana2hw>を使ってください。

%%

name:  hw2katakana
out: $full_width
expect: アイウカキギョウ。
%%eg:

$full_width = hw2katakana ('ｱｲｳｶｷｷﾞｮｳ｡');

%%
%%desc.en:

C<hw2katakana> converts L</halfwidth katakana> and halfwidth Japanese
punctuation to fullwidth katakana and fullwidth punctuation. Its
function is similar to the Emacs command
C<japanese-zenkaku-region>. For the opposite function, see L<kana2hw>.

%%
%%desc.ja:

半角カタカナを全角カタカナに変換します。

%%

name: katakana2hw
%%eg:

$hw = katakana2hw ("あいうえおアイウエオ");

%%
out: $hw
expect: あいうえおｱｲｳｴｵ
%%desc.en:

This converts katakana to L</halfwidth katakana>, leaving hiragana
unchanged. See also L</kana2hw>.

%%
%%desc.ja:

全角かたかなを半角かたかなに変換し、ひらがなをそのままにします。L</kana2hw>も参照。

%%

name:  is_kana
%%eg:

%%
%%desc.en:

This function returns a true value if its argument is a string of
kana, or an undefined value if not. The input cannot contain
punctuation or L</chouon>.

%%
%%desc.ja:

入力が仮名のみの場合、真、入力が仮名なでない文字を含む場合、偽(undef)。

%%

name:  is_hiragana
%%eg:

%%
%%desc.en:

This function returns a true value if its argument is a string of
hiragana, and an undefined value if not. The entire string from
beginning to end must all be kana for this to return true. The kana
cannot include punctuation marks or L</chouon>.

%%
%%desc.ja:

入力が平仮名のみの場合、真、入力が平仮名なでない文字を含む場合、偽(undef)。「ー」があれば偽になります。

%%


name: kana_order
%%eg:

$kana_order = kana_order ();

%%desc.en:

Returns an array reference containing an ordering of the kana. This is
useful for looping over the kana or sorting.

%%
%%desc.ja:

仮名の（適当な）順番を返します。例えば、全ての仮名をループしたい時に使えます。

%%

name: katakana2syllable
%%eg:

$syllables = katakana2syllable ('ソーシャルブックマークサービス');

%%desc.en:

This breaks the given string into syllables. If the string is broken
up character by character, it becomes 'ソ', 'ー', 'シ', 'ャ', 'ル'.
This breaks the string up into meaningful syllables, so that
C<$syllables> becomes 'ソー', 'シャ', 'ル'. A L</syllabic n> is
attached to the preceding sequence, so for example フラナガン is
broken up into four syllables, フ, ラ, ナ, ガン.

%%
%%desc.ja:

カタカナをシラブルにわける。たとえば、「ソーシャル」
は'ソ', 'ー', 'シ', 'ャ', 'ル'という意味のない文字ではなく、日本語の
「原子」の'ソー', 'シャ', 'ル'になります。撥音(ん)は前の仮名に付く。例えば、
「フラナガン」は「フ」, 「ラ」, 「ナ」, 「ガン」となります。

%%

name: InKana
%%eg:

    $is_kana = ('あいうえお' =~ /^\p{InKana}+$/);

%%
out: $is_kana
expect: 1
%%desc.en:

A character class for use in regular expressions which matches all
kana characters. This class catches meaningful combinations of
hiragana, katakana, halfwidth katakana, circled katakana, and katakana
combined words. As of [% info.version %], it does not match hentaigana.

This is a combination of the existing Perl character classes
C<Katakana>, C<InKatakana>, and C<InHiragana>, minus unassigned
characters, plus the "halfwidth katakana prolonged sound mark"
(U+FF70) <ｰ> (chouon), the "halfwidth katakana voiced sound mark"
(U+FF9E) <ﾞ> (dakuten) and the "halfwidth katakana semivoiced sound
mark" (U+FF9F) <ﾟ> (handakuten), minus '・', Unicode 30FB, "KATAKANA
MIDDLE DOT". It is somewhat like the following:

    qr/\p{Katakana}|\p{InKatakana}|\p{InHiragana}|ｰ|ﾞ|ﾟ>/

except that the unassigned points which are matched by C<\p{Katakana}>
are not matched and KATAKANA MIDDLE DOT is not matched.

%%
%%desc.ja:

正規表現に使うカタカナとひらがなにマッチします。

詳しくいうと以下の正規表現

    qr/\p{Katakana}|\p{InKatakana}|\p{InHiragana}|ｰ|ﾞ|ﾟ>/

と殆ど同じことにマッチしますが、C<\p{Katakana}>がマッチする未使用のコードポイントはマッチしません。「・」もマッチしません。変体仮名もマッチしません。

%%

name: square2katakana
%%eg:

$kata = square2katakana ('㌆');

%%
out: $kata
expect: ウォン
%%desc.en:

Convert a square katakana box into its components.

%%
%%desc.ja:

「㌆」を「ウォン」にするなど。

%%

name: katakana2square
%%eg:

$sq = katakana2square ('カロリーアイウエオウォン');

%%
out: $sq
expect: ㌍アイウエオ㌆
%%desc.en:

Convert katakana into a square thing if possible.

%%
%%desc.ja:

可能なかぎり、「ウォン」を「㌆」にするなど。


%%

class: hentaigana
%%explain.en:
Variant kana forms. Hentaigana are new in Unicode 10.0 (June 2017).
%%
%%explain.ja:
変体仮名はUnicode 10.0 (２０１７年６月）にあたらしいです。
%%

name: hentai2kana
%%desc.en:

Convert hentaigana into hiragana. Hentaigana with multiple
interpretations are converted into a list of kana separated by a
middle dot character.

This was added to the module in version 0.43.

%%
%%desc.ja:

変体仮名をひらがなに変換します。複数のかなにあてはまる変体仮名は「・」でつないだ列になります。

%%

name: hentai2kanji
%%desc.en:

Convert hentaigana into their equivalent kanji.

This was added to the module in version 0.43.

%%
%%desc.ja:

変体仮名を漢字に変換します。

%%

name: kanji2hentai

name: kana2hentai

class: wide
%%explain.en:

Functions for handling L</wide ASCII>.

%%
%%explain.ja:

全角英数字の変換・認識。

%%

name:  InWideAscii
%%eg:


use utf8;
if ('Ａ' =~ /\p{InWideAscii}/) {
    print "Ａ is wide ascii\n";
}

%%
%%desc.en:

This is a character class for use with \p which matches L</wide ASCII>

%%
%%desc.ja:

正規表現に使う全角英数字にマッチします。

%%

name:  wide2ascii
out: $ascii
expect: abCE019
%%eg:


$ascii = wide2ascii ('ａｂＣＥ０１９');

%%
%%desc.en:

Convert L</wide ASCII> into ASCII.

%%
%%desc.ja:

全角英数字を半角英数字(ASCII)に変換します。

%%

name:  ascii2wide
out: $wide
expect: ａｂＣＥ０１９
%%eg:

$wide = ascii2wide ('abCE019');

%%
%%desc.en:

Convert ASCII into L</wide ASCII>.


%%
%%desc.ja:

半角英数字(ASCII)を全角英数字に変換します。

%%

class: other

name:  kana2morse
%%eg:

$morse = kana2morse ('しょっちゅう');

%%
out: $morse
expect: --.-. -- .--. ..-. -..-- ..-
%%desc.en:

Convert Japanese kana into Morse code. Japanese morse code does not
have any way of representing small kana characters, so converting to
and then from morse code will result in しょっちゅう becoming シヨツチユウ.

%%
%%desc.ja:

かなをモースコードに変換します。日本語のモースコードは「っ」など小さいかなを表現できないので、仮名をモースコードにして、モースコードからまた仮名にする場合は「しょっちゅう」が「シヨツチユウ」になります。

%%

name:  morse2kana
%%eg:

$kana = morse2kana ('--.-. -- .--. ..-. -..-- ..-');

%%
out: $kana
expect: シヨツチユウ
%%desc.en:

Convert Japanese Morse code into kana. Each Morse code element must be separated by whitespace from the next one. 

%%
%%desc.ja:

モースコードをかなに変換します。（本物のモースコードは分かち書きが必要です。）

%%
%%bugs.en:

This has not been extensively tested.

%%
%%bugs.ja:

テストが不十分です。

%%


name:  kana2braille
%%eg:

%%
%%desc.en:

This converts kana into the equivalent Japanese braille (I<tenji>)
forms.

%%
%%desc.ja:

仮名を点字に変換します。

%%
%%bugs.en:

This has not been extensively tested. This is not an adequate Japanese
braille convertor. Creating Japanese braille requires breaking
Japanese sentences up into individual words, but this does not attempt
to do that. People who are interested in building a Perl braille
convertor could start here.

%%
%%bugs.ja:

きちんとしたテストがありません。日本語を本物の点字に変換することはわたちがきが必要ですがこの関数はそれをしませんので、不十分な変換機能です。

%%

name:  braille2kana
%%eg:


%%
%%desc.en:

Converts Japanese braille (I<tenji>) into the equivalent katakana.

%%
%%desc.ja:

点字をカタカナに変換します。

%%

name:  kana2circled
out: $circled
expect: ㋐㋑㋒㋓㋔
%%eg:

$circled = kana2circled ('あいうえお');

%%
%%desc.en:

This function converts kana into the "circled katakana" of Unicode,
which have code points from 32D0 to 32FE. See also L</circled2kana>.

There is no circled form of the ン kana, L</syllabic n>, so this is
left untouched.

%%
%%desc.ja:

仮名を丸付けかたかなに変換します。丸付け「ン」がありませんので、「ン」はそのままとなります。
丸付け片假名はユニコード32D0〜32FEにあります。

%%


name:  circled2kana
out: $kana
expect: アイウエオ
%%eg:

$kana = circled2kana ('㋐㋑㋒㋓㋔');

%%
%%desc.en:

This function converts the "circled katakana" of Unicode into
full-width katakana. See also L</kana2circled>.

%%
%%desc.ja:

丸がついているかたかなを全角かたかなに変換します。

%%

class: kanji

name: new2old_kanji
%%eg:

$old = new2old_kanji ('三国 連太郎');


%%
out: $old
expect: 三國 連太郎
%%desc.en:

Convert new-style (post-1949) kanji (Chinese characters) into old-style (pre-1949) kanji.

%%
%%desc.ja:

親字体を旧字体に変換します。

%%
%%bugs.en:

The list of characters in this convertor may not contain every pair of
old/new kanji.

It will not correctly convert 弁 since this has three different
equivalents in the old system.

%%
%%bugs.ja:

新旧字体の情報は確認不足です。「弁」は旧字体が三つありますなので、変換不可能です。

%%

name: old2new_kanji
%%eg:

$new = old2new_kanji ('櫻井');


%%
out: $new
expect: 桜井
%%desc.en:

Convert old-style (pre-1949) kanji (Chinese characters) into new-style
(post-1949) kanji.

%%
%%desc.ja:

旧字体を親字体に変換します。

%%

name: circled2kanji
%%eg:

$kanji = circled2kanji ('㊯');

%%
out: $kanji
expect: 協
%%desc.en:

Convert the circled forms of kanji into their uncircled equivalents.

%%
%%desc.ja:

丸付け漢字を普通の漢字に変換します。

%%

name: kanji2circled
%%eg:

$kanji = kanji2circled ('協嬉');

%%
out: $kanji
expect: ㊯嬉
%%desc.en:

Convert the usual forms of kanji into circled equivalents, if they
exist. Note that only a limited number of kanji have circled forms.

%%
%%desc.ja:

漢字を丸付け漢字に変換します。

%%

name: bracketed2kanji
%%eg:

$kanji = bracketed2kanji ('㈱');

%%
out: $kanji
expect: 株
%%desc.en:

Convert bracketed form of kanji into unbracketed form.

%%
%%desc.ja:

括弧漢字を普通の漢字に変換します。

%%

name: kanji2bracketed
%%eg:

$kanji = kanji2bracketed ('株');

%%
out: $kanji
expect: ㈱
%%desc.en:

Convert an unbracketed form of kanji into bracketed form, if it
exists, otherwise do nothing with it.

%%
%%desc.ja:

普通の漢字を括弧漢字に変換します。括弧形がある漢字は数少ないので、ご了承ください。当てはまる括弧漢字がなければ、そのままにします。

%%

class: cyrillization
%%explain.en:

This is an experimental cyrillization of kana based on the information
in a Wikipedia article,
L<http://en.wikipedia.org/wiki/Cyrillization_of_Japanese>. The module
author does not know anything about cyrillization of kana, so any
assistance in correcting this is very welcome.

%%
%%explain.ja:

実験的に仮名とキリル文字の変換をする。キリル文字に詳しい方の確認がありませんので、その結果をよく確認しますように。

%%

name: kana2cyrillic
%%eg:

$cyril = kana2cyrillic ('シンブン');

%%
out: $cyril
expect: симбун

name: cyrillic2katakana
%%eg:

$kana = cyrillic2katakana ('симбун');

%%
out: $kana
expect: シンブン

class: hangul

name: kana2hangul
%%eg:

$hangul = kana2hangul ('すごわざ');

%%
out: $hangul
expect: 스고와자
%%explain.en:

Convert kana into hangul (Korean letters). See also
L<Lingua::KO::Munja>.

%%
%%explain.ja:

かなをハングルに変換します。L<Lingua::KO::Munja>もご利用ください。

%%
%%bugs.en:

=over

=item Doesn't deal with L</syllabic n>

=item May be incorrect

This is based on lists found on the internet at
L<http://kajiritate-no-hangul.com/kana.html> and
L<http://lesson-hangeul.com/50itiranhyo.html>. There is currently no
proof of correctness.

=item No reverse conversion

There is currently no hangul to kana conversion.

=back
%%bugs.ja:

=over

=item 確認がありません

L<http://kajiritate-no-hangul.com/kana.html>とL<http://lesson-hangeul.com/50itiranhyo.html>を元にして使りみましたが正しいかどうかわかりません。

=item 逆変換がありません

ハングルから仮名への変換機能はありません。

=back

%%


