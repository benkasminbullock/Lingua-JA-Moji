=encoding UTF-8

=head1 [% trans.name | upper %]

Lingua::JA::Moji - [% trans.abstract %]

=head1 [% trans.synopsis | upper %]

[% trans.synopsis_text %]

    use Lingua::JA::Moji qw/kana2romaji romaji2kana/;
    use utf8;
    my $romaji = kana2romaji ('あいうえお');
    # $romaji is now 'aiueo'.
    my $kana = romaji2kana ($romaji);
    # $kana is now 'アイウエオ'.

=head1 VERSION

This document describes Lingua::JA::Moji version [% info.version %]
corresponding to git commit L<[% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> made on [% commit.date %].

=head1 [% trans.description | upper %]

[% trans.description_body %]

[%- FOR function IN functions %]

[%- IF function.defined ('class') %]

[% class = function.class %]

=head1 [% trans.$class | upper %]
[% IF function.defined ('explain') %]
[% function.explain.$lang %]
[% END %]
[% ELSE %]

=head2 [% function.name %] 

[% IF function.defined ('abstract') -%]
[% function.abstract.$lang %].
[%- END %]

    use [% module %] '[% function.name %]';
[% IF function.defined ('eg') %]
[% function.eg | indent ('    ') %]
[%- IF function.defined ('out') && function.defined ('expect') %]
    # [% function.out %] = '[% function.expect %]'
[%- END %]
[% END %]
[% IF function.desc.defined (lang) %]

[% function.desc.$lang %]

[% END %]

[%- IF function.defined ('bugs') %]

=head3 [% trans.bugs %]

[% function.bugs.$lang %]

[%- END %]

[%- END %]

[%- END %]

=head1 [% trans.also | upper %]

[% trans.modules %]

=head2 [% trans.romajikanahenkan %]

=over

=item L<Data::Validate::Japanese>

This contains four validators for kanji and kana, C<is_hiragana>,
corresponding to L</is_hiragana> in this module, and three more,
C<is_kanji>, C<is_katakana>, and C<is_h_katakana>, for half-width
katakana.

=item L<Lingua::JA::Kana>

This contains convertors for hiragana, half width and full width
katakana, and romaji. As of version 0.07 [Aug 06, 2012], the romaji
conversion is less complete than this module.

=item L<Lingua::JA::Romanize::Japanese>

Romanization of Japanese. The module also includes romanization of
kanji via the kakasi kanji to romaji convertor, and other functions.

=item L<Lingua::JA::Romaji::Valid>

Validate romanized Japanese. This module does the same thing as
L</is_romaji> in Lingua::JA::Moji.

=item L<Lingua::JA::Hepburn::Passport>

Passport romanization, which means converting long vowels into
"OH". This corresponds to L</kana2romaji> in the current module using
the C<< passport => 1 >> option, for example

    $romaji = kana2romaji ("かとう", {style => 'hepburn', passport => 1});

=item L<Lingua::JA::Fold>

Full/half width conversion, collation of Japanese text.

=item L<Lingua::JA::Romaji>

Romaji to kana/kana to romaji conversion.

=item L<Lingua::JA::Regular::Unicode>

This includes hiragana to katakana, full width / half width, and wide
ascii conversion. The strange name is due to its being an extension of
L<Lingua::JA::Regular> using Unicode-encoded strings.

=item L<Lingua::JA::NormalizeText>

A huge collection of normalization functions for Japanese text. If
Lingua::JA::Moji does not have it, Lingua::JA::NormalizeText may do.

=item L<Lingua::KO::Munja>

This is similar to the present module for Korean.

=item L<Lingua::JA::Onbiki>

=item L<Lingua::JA::Jtruncate>

=back

=head2 [% trans.kanjikanahenkan %]

=over

=item L<Lingua::JA::Romanize::MeCab>

Romanization of Japanese language with MeCab

=item L<Text::MeCab>

=item L<Lingua::JA::Romanize::Japanese>

Romanization of Japanese language via kakasi.

=back

=head2 [% trans.books %]

[% trans.naokitomitabook %]

[% IF lang == 'en' %]

=head1 NOTES

This section explains some of the Japanese-language-specific
terminology used elsewhere in the documentation. The headers in this
section are in lower case for the benefit of internal documentation
links.

=over

=item chouon

The long vowel marker, "ー", or I<chōon>, which is used in Japanese
katakana to indicate a lengthened vowel. See L<What is the long line symbol used in katakana?|http://www.sljfaq.org/afaq/chouon.html>

=item dakuten

=item handakuten

These are diacritic marks which appear on some kana.

=item halfwidth katakana

Halfwidth katakana, I<hankaku katakana> (半角かたかな) is a legacy
encoding of katakana based on an eight-bit encoding. See
L<What is half-width katakana?|http://www.sljfaq.org/afaq/half-width-katakana.html>
for full details.

=item syllabic n

In this document, "syllabic n" means the kana ん or ン. See L<What is syllabic n?|http://www.sljfaq.org/afaq/syllabic-n.html> for full details.

=item wide ASCII

Wide ASCII, fullwidth ASCII, or I<zenkaku eisūji> (全角英数字) are a
legacy of bitmapped fonts which has survived into the present
day. "Wide ascii" characters were originally special bitmapped font
characters created to be the same size as one kanji or kana
character. The name for normal ASCII characters in Japanese is
I<hankaku eisūji> (半角英数字), literally "half width English letters
and numerals". See L<What is "wide ASCII"?|http://www.sljfaq.org/afaq/wide-ascii.html> for full details.

=back

[% END # lang == 'en' %]

=head1 EXPORT

This module exports its functions only on request. To export all the
functions in the module,

    use Lingua::JA::Moji ':all';

=head1 DEPENDENCIES

=over

=item L<Carp>

Carp is used to report errors.

=item L<Convert::Moji>

This is used for most of the work of the module.

=item L<JSON::Parse>

This is used to read in some of the data.

=back

=head1 ACKNOWLEDGEMENTS

Thanks to Naoki Tomita, David Steinbrunner, and Neil Bowers for fixes.

=head1 HISTORY

"Moji" (文字) means "letters" in Japanese. I started Lingua::JA::Moji
out of a need for more comprehensive handling of Japanese text than
was offered by any of the existing modules on CPAN. There were a lot
of modules offering piecemeal romaji/kana conversions or
hiragana/katakana conversions, but, with apologies, nothing truly
comprehensive or robust. Lingua::JA::Moji was originally a private
module. Most of the functions in the module are things I needed for my
own projects.

The design using L<Convert::Moji> was part of an abandoned plan to
make a cross-language module which could produce, say, a JavaScript
converter doing the same things as this Perl one, using the same text
sources.

I wasn't really sure whether to release it, but eventually I released
it to CPAN as a result of requests for the source code of an online
romaji/kana converter by website users. The module interface, in
particular the hash reference options to L</kana2romaji> and
L</romaji2kana>, is rather messy, and some of the defaults are rather
strange, but since it was described in Naoki Tomita's book, and some
people may be using it as is, I'm not very keen to change it in
incompatible ways.

=over

=item 0.43 

This version added support for
L<hentaigana|http://www.sljfaq.org/afaq/hentaigana.html>. This is
based on copy and paste of the Unicode 10.0 standard draft
documents. See the directory L<F<data>|[% info.repo
%]/tree/master/data> in the github repository for the files used to
generate this data.

=item 0.46

This version disallowed hyphens as the first character of a romaji
string and added L</smallize_kana> and L</cleanup_kana>.

=item 0.47

This version added a list of the "Yūrei moji" (幽霊文字), false kanji, and
changed romanisation somewhat.

=item 0.48

This version changed kana2romaji to be consistent with the documentation for
long vowel options wapuro and none.

=item 0.53

This version added L</join_sound_marks> and L</split_sound_marks> to
the module.

=item 0.54

This version removed the nonsensical C<kana_order> function from the
module. It improved the behaviour of L</is_romaji_strict> after
comparing its negatives and positives with a large number of English
and nonsense words. It improved the behaviour of L</smallize_kana>
with regard to the "tsu" kana. L</cleanup_kana> was improved to deal
with stray dakuten and handakuten and some other odd kanji/kana
confusions.

=back

[% start_year=2008 %]
[% INCLUDE "author" %]
